<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jaeger on Yeqown</title>
    <link>https://www.yeqown.xyz/tags/Jaeger/</link>
    <description>Recent content in Jaeger on Yeqown</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 06 Aug 2020 08:34:45 +0800</lastBuildDate>
    <atom:link href="https://www.yeqown.xyz/tags/Jaeger/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Opentracing实战</title>
      <link>https://www.yeqown.xyz/2020/08/06/opentracing%E5%AE%9E%E6%88%98/</link>
      <pubDate>Thu, 06 Aug 2020 08:34:45 +0800</pubDate>
      <guid>https://www.yeqown.xyz/2020/08/06/opentracing%E5%AE%9E%E6%88%98/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;&#xA;  背景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%83%8c%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在没有链路追踪系统的情况下，如果只要少数几个服务，或许还可以通过日志来排查定位问题。但是如果服务一旦超过10个，那么再想通过日志来定位分析问题将无比繁琐。&#xA;因为，你先要从大量的日志中删筛选出某次请求的日志数据，才能进行后续的定位分析。&#xA;倘若日志系统也不够完善，日志对于调试毫无帮助，那又得退回到最原始的方式，通过代码断点和增加日志，等待问题复现，或者通过肉眼检查代码。&#xA;不是说这种方式不行，而是大部分的程序员的业务需求比较紧张，这样的排查手段效率和收益远远达不到要求（如果你有时间，当我没说 🐶）。&lt;/p&gt;&#xA;&lt;p&gt;在实际场景中，我也遇到了这样的问题：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;日志系统里包含了过少的信息，对于调试几乎没有帮助 (几乎只有错误日志，缺少输出上下文的日志)。&lt;/li&gt;&#xA;&lt;li&gt;服务调用复杂，一个请求失败，只能透过错误码和错误信息进行判断是否存在调用失败的情况。&lt;/li&gt;&#xA;&lt;li&gt;调用链路复杂的情况下，想要对某个请求进行优化，无从下手。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这里只列举了跟&lt;code&gt;trace&lt;/code&gt;相关的一些原始场景，当然从上面的描述中还能发现&lt;code&gt;日志系统不够完善，对调试不友好&lt;/code&gt;，不过这里首要解决的问题是&lt;code&gt;链路追踪问题&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如果对路链路追踪没有概念，还望自行查阅资料，这里不会过多介绍～&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;opentracing&#34;&gt;&#xA;  Opentracing&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#opentracing&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：Opentracing 是一套标准接口，而不是具体实现。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;这里就实战opentracing + jaeger 的链路追踪方案。其中 opentracing 是一套标准接口，而jaeger是包含了 opentracing 的实现的一套工具。&#xA;Trace链路简单示例如下：&lt;/p&gt;&#xA;&lt;img src=&#34;https://www.yeqown.xyz/images/tracing1_0.png&#34; /&gt;&#xA;&lt;h4 id=&#34;trace&#34;&gt;&#xA;  Trace&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#trace&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;描述在分布式系统中的一次&amp;quot;事务&amp;quot;。&lt;/p&gt;&#xA;&lt;h4 id=&#34;span&#34;&gt;&#xA;  Span&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#span&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;表示工作流的一部分的命名和定时操作。可以接受标签(Tag Key:Value)，以及附加到特定span实例的标注(Annotation)，如时间戳和结构化日志。&lt;/p&gt;&#xA;&lt;h4 id=&#34;spancontext&#34;&gt;&#xA;  SpanContext&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spancontext&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;追踪伴随分布式事务的信息，包括它通过网络或通过消息总线将服务传递给服务的时间。span上下文包含TraceId、SpanId和追踪系统需要传播到下游服务的其他数据。&lt;/p&gt;&#xA;&lt;h3 id=&#34;实战&#34;&gt;&#xA;  实战&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9e%e6%88%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;这里我准备的是 Go 项目，服务之间通过&lt;code&gt;gRPC&lt;/code&gt;通信。链路如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                +-- process internal trace2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     +---&amp;gt; process internal trace1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     |                 +---&amp;gt; server-b trace&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gRPC&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;entry&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HTTP&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ---&amp;gt; server-a trace--gRPC--|&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                       +---&amp;gt; server-c trace&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gRPC&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                   |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                   +----&amp;gt; process internal trace3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从上图中可以明确，我们的目标是：实践&lt;code&gt;跨服务调用&lt;/code&gt;和&lt;code&gt;服务内部调用&lt;/code&gt;的链路追踪，配合jaeger我们还可以将链路信息可视化。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
