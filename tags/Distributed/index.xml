<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Distributed on Yeqown</title>
    <link>https://www.yeqown.xyz/tags/Distributed/</link>
    <description>Recent content in Distributed on Yeqown</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 27 Jan 2022 16:52:24 +0800</lastBuildDate>
    <atom:link href="https://www.yeqown.xyz/tags/Distributed/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计一个分布式定时任务系统</title>
      <link>https://www.yeqown.xyz/2022/01/27/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Thu, 27 Jan 2022 16:52:24 +0800</pubDate>
      <guid>https://www.yeqown.xyz/2022/01/27/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%B3%BB%E7%BB%9F/</guid>
      <description>&lt;h3 id=&#34;需求和背景分析&#34;&gt;&#xA;  需求和背景分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9c%80%e6%b1%82%e5%92%8c%e8%83%8c%e6%99%af%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;一提到定时任务的使用场景，我们肯定能想到很多场景，比如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每天晚上12点执行一次清理数据的任务&lt;/li&gt;&#xA;&lt;li&gt;每天凌晨1点给符合条件的用户发送推广邮件&lt;/li&gt;&#xA;&lt;li&gt;每个月10号结算工资&lt;/li&gt;&#xA;&lt;li&gt;每隔5分钟检查一次服务器的状态&lt;/li&gt;&#xA;&lt;li&gt;每天根据用户的配置，给用户发送站内消息提醒&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;从常见的场景中，我们可以提炼出一些定时任务的特点：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;特点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;定时&lt;/td&gt;&#xA;          &lt;td&gt;执行时间有规则&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;可靠&lt;/td&gt;&#xA;          &lt;td&gt;可以延迟执行，但不能不执行；可以不执行，但是不能多执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;并发（可能）&lt;/td&gt;&#xA;          &lt;td&gt;某些场景下，可以运行多个 cron 进程来提高执行效率&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;可执行&lt;/td&gt;&#xA;          &lt;td&gt;这个有点废话了，但是这个关系到 cronjob 的设计，因此在这里还是提出来&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;但是作为一个系统来说，我们需要更多的功能来提升用户体验，保证平台的可靠和稳定。我们设想下以下的场景：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定时任务已经触发了，但是有没有执行，执行结果是什么？&lt;/li&gt;&#xA;&lt;li&gt;如果一个定时任务长时间运行，那么它正常吗？&lt;/li&gt;&#xA;&lt;li&gt;一个定时任务还在运行，但是下一个触发时机又到来了，该怎么办？&lt;/li&gt;&#xA;&lt;li&gt;如果服务器资源已经处于高位，那么要被触发的任务还触发吗？&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;最后，基本的访问控制，权限分配和API设计，这些都是系统功能的一部分，但不作为本文的重点考虑对象。&lt;/p&gt;&#xA;&lt;h4 id=&#34;一些概念&#34;&gt;&#xA;  一些概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e4%ba%9b%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;到这里我们可以提取一些概念，来帮助我们设计一个系统：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;名词&lt;/th&gt;&#xA;          &lt;th&gt;解释&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;CronJob&lt;/td&gt;&#xA;          &lt;td&gt;定时任务实例，描述定时任务资源的一个实体&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;Job&lt;/td&gt;&#xA;          &lt;td&gt;执行中的定时任务&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;Scheduler&lt;/td&gt;&#xA;          &lt;td&gt;调度器，负责触发 CronJob 执行和监控 Job 的执行状态；或许还会存储一些 CronJob 的状态&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;JobRuntime&lt;/td&gt;&#xA;          &lt;td&gt;job 运行时，准备 Job 运行时需要的资源; 可以参考 k8s CRI&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这里 JobRuntime 是抽象化的概念，因为 Job 可以是k8s上的POD，也可以是物理机的进程，还可以是一个进程中的coroutine。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
