<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Yeqown</title>
    <link>https://www.yeqown.xyz/tags/Javascript/</link>
    <description>Recent content in Javascript on Yeqown</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 02 Jul 2025 09:45:48 +0800</lastBuildDate>
    <atom:link href="https://www.yeqown.xyz/tags/Javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WebAssembly Spec 浅析和跨语言实践</title>
      <link>https://www.yeqown.xyz/2025/07/02/WebAssemblySpec%E6%B5%85%E6%9E%90%E5%92%8C%E8%B7%A8%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 02 Jul 2025 09:45:48 +0800</pubDate>
      <guid>https://www.yeqown.xyz/2025/07/02/WebAssemblySpec%E6%B5%85%E6%9E%90%E5%92%8C%E8%B7%A8%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本文主要聚焦于 WebAssembly 的核心规范（Core Spec）部分。WASI 和 Embedder Spec 等其他部分并非本文的重点，感兴趣的读者可自行查阅相关资料。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;img src=&#34;https://www.yeqown.xyz/images/wasm/intro.png&#34;&gt;&#xA;&lt;h2 id=&#34;目的&#34;&gt;&#xA;  目的&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%ae%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;随着 Web 技术的普及，越来越多的应用场景（如游戏、音视频处理、AI 等）需要在浏览器中运行。这些场景通常涉及 CPU 密集型任务，而现有 Web 引擎在处理此类任务时，性能仍不及原生语言。此外，C/C++ 等语言已积累了大量成熟的库，为了高效复用这些库以扩展 Web 的能力，急需一种新方式，使 C++/Rust 等语言也能在浏览器环境中运行。&lt;/p&gt;&#xA;&lt;p&gt;为解决上述问题，W3C 提出了 WebAssembly 规范。该规范设计了一种全新的、与机器无关的汇编指令集、运行时（可理解为虚拟机）以及内存模型等。&lt;/p&gt;&#xA;&lt;p&gt;WebAssembly 规范发布后，各大浏览器厂商迅速跟进支持，使其成为一种跨平台的二进制格式，能够在不同操作系统和硬件平台上运行。WASM 的应用范围也因此不再局限于 Web 场景，而是扩展到移动端、服务器端等领域。在云原生领域，Envoy、Kong 和 Apisix 等项目已支持 WASM 作为其扩展插件。WasmEdge 更进一步，直接提出将 WASM 应用于边缘计算场景，例如无服务器应用和函数即服务等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;核心概念&#34;&gt;&#xA;  核心概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在最新规范中，WebAssembly 定义了以下核心概念：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;概念&lt;/th&gt;&#xA;          &lt;th&gt;解释说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Values&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;提供四种基础数值类型：32位和64位的整型及浮点型。32位整型可用于表示布尔值或内存地址。另有128位扩展整型用于高精度计算。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Instructions&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;基于栈式虚拟机执行的指令，分为简单指令和控制指令两类。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Traps&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;类似异常机制，当发生非法操作（如越界访问）时立即中止执行并报告宿主环境。功能类似于Go/Rust中的panic。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;与其他编程语言一致，用于组织特定功能的代码，接收参数并返回结果。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tables&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;数据结构上是一个数组，用于存储特定类型（&lt;code&gt;funcref&lt;/code&gt;和&lt;code&gt;externref&lt;/code&gt;），可通过索引模拟函数指针。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Linear Memory&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;一段可动态增长的连续字节数组，程序可存储和加载其中任意位置的数据，越界访问会触发Trap。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Modules&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;包含类型、函数、表、内存和全局变量的定义，作为部署、加载和编译的基本单位。可声明导入导出项，并支持定义自动执行的启动函数。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Embedder&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;指将WebAssembly程序嵌入宿主环境的实现方式，如wasmtime或Web环境中的WebAssembly运行时。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;img src=&#34;https://www.yeqown.xyz/images/wasm/concepts.png&#34;&gt;&#xA;&lt;h2 id=&#34;举例分析&#34;&gt;&#xA;  举例分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%be%e4%be%8b%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;接下来，我们将结合一个简单的 WASM 程序来辅助理解 WebAssembly 规范的内容。这里使用 Rust 语言编写一个简单的加法程序，并将其编译为 WASM 模块：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
