<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cache on Yeqown</title>
    <link>https://www.yeqown.xyz/tags/cache/</link>
    <description>Recent content in Cache on Yeqown</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 14 Nov 2019 09:14:25 +0800</lastBuildDate>
    <atom:link href="https://www.yeqown.xyz/tags/cache/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于Repository设计缓存方案</title>
      <link>https://www.yeqown.xyz/2019/11/14/%E5%9F%BA%E4%BA%8ERepository%E8%AE%BE%E8%AE%A1%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/</link>
      <pubDate>Thu, 14 Nov 2019 09:14:25 +0800</pubDate>
      <guid>https://www.yeqown.xyz/2019/11/14/%E5%9F%BA%E4%BA%8ERepository%E8%AE%BE%E8%AE%A1%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/</guid>
      <description>&lt;h3 id=&#34;场景&#34;&gt;&#xA;  场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;Tester—A：这个 getInfo 接口咋这么慢呢？查一下要5+s？QPS竟然只有10！！！！&#xA;RD-B    ：这是因为getInfo要查库。。。N多库&#xA;Tester-B：那优化一下呗？&#xA;RD-B    ：好的，容我操作一波（给接口加上一个响应缓存），好了你再测试一下&#xA;Tester-B：（测试中。。。），速度果然快了不少。诶不对，这个接口里拿到的用户信息不对，我明明已经balaba了，这里没有更新！！！&#xA;RD-B    ：哦哦哦，我晓得咯，再容我操作一波（缓存加有效时间，个人信息更新的时候再强删缓存），O了&#xA;&#xA;至此开始了针对于QPS+缓存更新的一些列测试。。。剧终。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;QPS和响应时间是后（jie）端（kou)工程师非常熟悉的指标，这两个值能比较直观的反映该接口的性能，&lt;del&gt;间接&lt;/del&gt;直接影响了前端页面的流畅度。。。&lt;/p&gt;&#xA;&lt;h3 id=&#34;问题来了&#34;&gt;&#xA;  问题来了&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%97%ae%e9%a2%98%e6%9d%a5%e4%ba%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;del接口del查询性能如何提高&#34;&gt;&#xA;  &lt;del&gt;接口&lt;/del&gt;查询性能如何提高&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#del%e6%8e%a5%e5%8f%a3del%e6%9f%a5%e8%af%a2%e6%80%a7%e8%83%bd%e5%a6%82%e4%bd%95%e6%8f%90%e9%ab%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;除去机器和编程语言的因素之后，肯定要从业务场景出发，分析接口响应缓慢的原因。譬如，最常见的:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;查N多表，表还没有索引orz&lt;/li&gt;&#xA;&lt;li&gt;无用数据，增加传输的Size&lt;/li&gt;&#xA;&lt;li&gt;反复查询某些&lt;del&gt;热点&lt;/del&gt;数据，但每次都直接打到数据库&lt;/li&gt;&#xA;&lt;li&gt;上游服务响应缓慢&lt;/li&gt;&#xA;&lt;li&gt;其他&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;好了，这里只讨论热点数据的缓存方案，毕竟要具体场景具体分析，而缓存方案是比较通用的。&lt;/p&gt;&#xA;&lt;h4 id=&#34;缓存方案如何选择&#34;&gt;&#xA;  缓存方案如何选择&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%93%e5%ad%98%e6%96%b9%e6%a1%88%e5%a6%82%e4%bd%95%e9%80%89%e6%8b%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;缓存方案&lt;/th&gt;&#xA;          &lt;th&gt;优势&lt;/th&gt;&#xA;          &lt;th&gt;劣势&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;Response缓存&lt;/td&gt;&#xA;          &lt;td&gt;简单暴力&lt;/td&gt;&#xA;          &lt;td&gt;缓存更新时机不好把控，如果面面俱到可能心态崩坏；缓存粒度太大，无法局部更新；针对查询接口有帮助，其他业务下查询数据则毫无帮助&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;Repository缓存&lt;/td&gt;&#xA;          &lt;td&gt;粒度由Repo自行掌握，可控性强；Repo复用场景下会提高应用整体的速度&lt;/td&gt;&#xA;          &lt;td&gt;需要针对各个Repo做缓存的处理；改动较多；其他orz&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;总的来说，Repository的缓存方案，在上述背景上较简单暴力的中间件缓存法要更加优雅可控～。&lt;/p&gt;&#xA;&lt;h3 id=&#34;缓存算法&#34;&gt;&#xA;  缓存算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%93%e5%ad%98%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;提到缓存就一定会提到缓存替换策略，有最常见的：&lt;code&gt;LRU&lt;/code&gt; &lt;code&gt;LFU&lt;/code&gt; &lt;code&gt;FIFO&lt;/code&gt; &lt;code&gt;MRU(最近频繁使用算法)&lt;/code&gt; &lt;code&gt;LRU的多个变种算法&lt;/code&gt; &lt;code&gt;LIRS&lt;/code&gt;等。&#xA;这里选用了LRU-K（K=2）并基于&lt;code&gt;golang&lt;/code&gt;来实现 &lt;code&gt;cached-repository&lt;/code&gt;，更多算法的详细信息参见参考文档中的&lt;a href=&#34;https://yeqown.github.io/2019/08/12/LRU%E5%92%8CLRU-K/&#34;&gt;LRU和LRU-K&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;p&gt;这里分成了两个&lt;code&gt;interface&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;CacheAlgor&lt;/code&gt;重点在于与&lt;code&gt;Repo&lt;/code&gt;交互，所以只提供了简单的增删改查，底层还是基于&lt;code&gt;Cache&lt;/code&gt;来实现的。本意是想实现多种缓存替换算法来丰富&lt;code&gt;cached-repository&lt;/code&gt;，orz&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// cache.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// CacheAlgor is an interface implements different alg.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CacheAlgor&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Put&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}) (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Update&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Delete&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;lru.Cache&lt;/code&gt; 在于提供 基于&lt;code&gt;LRU-like&lt;/code&gt;算法缓存和替换能力，所以接口会更丰富一些，&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
