<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memcached on Yeqown</title>
    <link>https://www.yeqown.xyz/tags/memcached/</link>
    <description>Recent content in Memcached on Yeqown</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 03 Jan 2025 20:49:24 +0800</lastBuildDate>
    <atom:link href="https://www.yeqown.xyz/tags/memcached/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>通过一次抓包来掌握memcached</title>
      <link>https://www.yeqown.xyz/2025/01/03/%E9%80%9A%E8%BF%87%E4%B8%80%E6%AC%A1%E6%8A%93%E5%8C%85%E6%9D%A5%E6%8E%8C%E6%8F%A1memcached/</link>
      <pubDate>Fri, 03 Jan 2025 20:49:24 +0800</pubDate>
      <guid>https://www.yeqown.xyz/2025/01/03/%E9%80%9A%E8%BF%87%E4%B8%80%E6%AC%A1%E6%8A%93%E5%8C%85%E6%9D%A5%E6%8E%8C%E6%8F%A1memcached/</guid>
      <description>&lt;h2 id=&#34;什么是-memcachedhttpsmemcachedorg&#34;&gt;&#xA;  什么是 &lt;a href=&#34;https://memcached.org/&#34;&gt;memcached&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-memcachedhttpsmemcachedorg&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;memcached 是一个高性能的“分布式”内存对象缓存系统，用于动态 Web 应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态、数据库驱动网站的速度。memcached 是自由软件，以 BSD 许可证发布。&lt;/p&gt;&#xA;&lt;p&gt;相比于大家熟知的 Redis，memcached 更加简单，只支持 key-value 存储，而 Redis 支持更多的数据结构，如 list、set、hash 等。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Github 地址：&lt;a href=&#34;https://github.com/memcached/memcached&#34;&gt;https://github.com/memcached/memcached&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;为什么有-redis-还要使用-memcached&#34;&gt;&#xA;  为什么有 redis 还要使用 memcached&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e6%9c%89-redis-%e8%bf%98%e8%a6%81%e4%bd%bf%e7%94%a8-memcached&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;从我个人的角度来说，要在采用一个缓存系统的时候，我会优先选择 Redis，因为 Redis 功能更加强大，支持更多的数据结构，而且 Redis 也支持持久化，在高可用和分布式部分的设计上也更加完善。&lt;/p&gt;&#xA;&lt;p&gt;但是 memcached 也有自己的优势，比如更加简单，更加轻量级，更加容易上手，因此在某些系统中也会选用 memcached。因此，了解 memcached 的设计也是有必要的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;memcached-协议概览&#34;&gt;&#xA;  memcached 协议概览&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#memcached-%e5%8d%8f%e8%ae%ae%e6%a6%82%e8%a7%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;memcached 支持基本的文本协议和&lt;a href=&#34;https://docs.memcached.org/protocols/meta/&#34;&gt;元文本协议&lt;/a&gt;，其中元文本协议于 2019 年推出。memcached 还曾支持过二进制协议，但已经被废弃。&lt;/p&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;memcached 的协议是基于文本的，因此我们可以通过 telnet 或者 netcat 工具来模拟 memcached 的客户端，从而方便的进行测试。&lt;/p&gt;&#xA;&lt;p&gt;这两者是 “交叉兼容” 的，也就是说我们可以通过 &lt;em&gt;&lt;strong&gt;文本协议来设置键值&lt;/strong&gt;&lt;/em&gt;, 通过 &lt;em&gt;&lt;strong&gt;元文本协议来查询&lt;/strong&gt;&lt;/em&gt;，反之亦然。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;standard-text-protocol&#34;&gt;&#xA;  Standard Text Protocol&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#standard-text-protocol&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;详细的协议文档可以参考：&lt;a href=&#34;https://github.com/memcached/memcached/blob/master/doc/protocol.txt&#34;&gt;https://github.com/memcached/memcached/blob/master/doc/protocol.txt&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;memcached 的标准文本协议是一个基于文本的协议，它使用 ASCII 字符串来进行通信。memcached 服务器监听在默认端口 11211 上，客户端通过 TCP 连接到服务器，然后发送命令和数据。因此我们可以很容易的通过 telnet 工具就可以完成 memcached 的基本操作。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
