<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Round-Robin on Yeqown</title>
    <link>https://www.yeqown.xyz/tags/round-robin/</link>
    <description>Recent content in Round-Robin on Yeqown</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 08 Jun 2018 10:53:32 +0000</lastBuildDate>
    <atom:link href="https://www.yeqown.xyz/tags/round-robin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>api-gateway中实现基于权重的轮询调度</title>
      <link>https://www.yeqown.xyz/2018/06/08/api-gateway%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8E%E6%9D%83%E9%87%8D%E7%9A%84%E8%BD%AE%E8%AF%A2%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Fri, 08 Jun 2018 10:53:32 +0000</pubDate>
      <guid>https://www.yeqown.xyz/2018/06/08/api-gateway%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8E%E6%9D%83%E9%87%8D%E7%9A%84%E8%BD%AE%E8%AF%A2%E8%B0%83%E5%BA%A6/</guid>
      <description>&lt;h3 id=&#34;背景和目标&#34;&gt;&#xA;  背景和目标&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%83%8c%e6%99%af%e5%92%8c%e7%9b%ae%e6%a0%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;背景&#34;&gt;&#xA;  背景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%83%8c%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;项目需要在现有项目的基础上实现权限系统，但为了低耦合，选择实现了一个基于&lt;a href=&#34;https://github.com/ne7ermore/gRBAC&#34;&gt;ne7ermore/gRBAC&lt;/a&gt;的auth-server，用于实现权限，角色，用户的管理，以及提供鉴权服务。在开发环境对接没有问题，正常的鉴权访问。到了线上部署的时候，才发现：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;线上某服务部署在多台机器上&lt;/strong&gt;;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;目前的api-gateway并不支持同一服务配置多个node&lt;/strong&gt;;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;想的办法有：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;          &lt;th&gt;优点&lt;/th&gt;&#xA;          &lt;th&gt;缺点&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;api-gateway通过url来转发请求，之前是配置IP加端口&lt;/td&gt;&#xA;          &lt;td&gt;api-gateway改动小&lt;/td&gt;&#xA;          &lt;td&gt;影响web和APP升级&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;api-gateway能支持多台机器，并进行调度&lt;/td&gt;&#xA;          &lt;td&gt;api-gateway功能更强大，把以后要做的事情提前做好基础&lt;/td&gt;&#xA;          &lt;td&gt;好像没啥缺点，只是费点时间支持下多节点配置，并调度&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如果没说清，请看下图：&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.yeqown.xyz/images/api-gateway-changing.png&#34; alt=&#34;api-gateway-changing&#34; /&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;目标&#34;&gt;&#xA;  目标&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%ae%e6%a0%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;那么，目标也就明确了，需要实现&lt;strong&gt;api-gateway中实现基于权重的调度&lt;/strong&gt;。为啥要基于权重？其一是仿照nginx基于权重的负载均衡，其二是服务器性能差异。&lt;/p&gt;&#xA;&lt;h3 id=&#34;轮询调度算法介绍&#34;&gt;&#xA;  轮询调度算法介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bd%ae%e8%af%a2%e8%b0%83%e5%ba%a6%e7%ae%97%e6%b3%95%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;轮询调度算法&#34;&gt;&#xA;  &lt;strong&gt;轮询调度算法&lt;/strong&gt;:&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bd%ae%e8%af%a2%e8%b0%83%e5%ba%a6%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;轮询调度算法的原理是每一次把来自用户的请求轮流分配给内部中的服务器，从1开始，直到N(内部服务器个数)，然后重新开始循环。该算法的优点是其简洁性，它无需记录当前所有连接的状态，所以它是一种无状态调度。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;假设有一组服务器N台，S = {S1, S2, …, Sn}，一个指示变量i表示上一次选择的服务器ID。变量i被初始化为N-1。其算法如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) mod n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Si;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- #### **加权轮询调度算法**： --&gt;&#xA;&lt;h4 id=&#34;平滑加权轮询调度算法&#34;&gt;&#xA;  &lt;strong&gt;平滑加权轮询调度算法&lt;/strong&gt;：&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b9%b3%e6%bb%91%e5%8a%a0%e6%9d%83%e8%bd%ae%e8%af%a2%e8%b0%83%e5%ba%a6%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;上述的轮询调度算法，并没有考虑服务器性能的差异，实际生产环境中，每一台服务器配置和安装的业务并不一定相同，处理能力不完全一样。因此需要根据服务器能力，分配不同的权值，以免服务的超负荷和过分闲余。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
