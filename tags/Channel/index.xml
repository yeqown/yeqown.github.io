<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Channel on Yeqown</title>
    <link>https://www.yeqown.xyz/tags/Channel/</link>
    <description>Recent content in Channel on Yeqown</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 13 Apr 2020 17:23:45 +0800</lastBuildDate>
    <atom:link href="https://www.yeqown.xyz/tags/Channel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Channel in Go小结</title>
      <link>https://www.yeqown.xyz/2020/04/13/channel-in-Go%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Mon, 13 Apr 2020 17:23:45 +0800</pubDate>
      <guid>https://www.yeqown.xyz/2020/04/13/channel-in-Go%E5%B0%8F%E7%BB%93/</guid>
      <description>&lt;p&gt;在其他编程语言中，如果想要在线程中通信，最常用的手段是共享内存。然而考虑到线程冲突问题，不得不考虑加锁，以保证并发安全，加锁也一定会带来额外的开销，对性能产生影响。&lt;/p&gt;&#xA;&lt;h3 id=&#34;csp模型&#34;&gt;&#xA;  CSP模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#csp%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在 Go 语言中也能使用共享内存加互斥锁进行通信，但是 Go 语言提供了一种不同的并发模型，也就是通信顺序进程（Communicating sequential processes，CSP）1。Goroutine 和 Channel 分别对应 CSP 中的实体和传递信息的媒介，Go 语言中的 Goroutine 会通过 Channel 传递数据。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;使用示例&#34;&gt;&#xA;  使用示例&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e7%a4%ba%e4%be%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在使用之前，需要对channel有个整体的印象：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;FIFO (First In First Out)&lt;/li&gt;&#xA;&lt;li&gt;分为有缓冲和无缓冲两种&lt;/li&gt;&#xA;&lt;li&gt;在使用过程中会阻塞（无缓冲时，只操作读或写；有缓冲已满时，只操作读或者写）&lt;/li&gt;&#xA;&lt;li&gt;接受者和发送者都是goroutine&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;参考下图：&lt;/p&gt;&#xA;&lt;image src=&#34;https://www.yeqown.xyz/images/channel-overview.svg&#34;/&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Q: 有缓冲和无缓冲在使用上有什么区别？&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ch := make(chan int) // 无缓冲&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 有缓冲，大小为1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 发送&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;注意事项&#34;&gt;&#xA;  注意事项&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;在使用channel时，需要注意一下事项：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;操作\CH状态&lt;/th&gt;&#xA;          &lt;th&gt;ch为空&lt;/th&gt;&#xA;          &lt;th&gt;ch已关闭&lt;/th&gt;&#xA;          &lt;th&gt;ch正常&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;发送 ch &amp;lt;-&lt;/td&gt;&#xA;          &lt;td&gt;死锁&lt;/td&gt;&#xA;          &lt;td&gt;panic&lt;/td&gt;&#xA;          &lt;td&gt;成功或阻塞&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;接收 &amp;lt;-ch&lt;/td&gt;&#xA;          &lt;td&gt;死锁&lt;/td&gt;&#xA;          &lt;td&gt;成功或空值&lt;/td&gt;&#xA;          &lt;td&gt;成功或阻塞&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;关闭 close(ch)&lt;/td&gt;&#xA;          &lt;td&gt;panic&lt;/td&gt;&#xA;          &lt;td&gt;panic&lt;/td&gt;&#xA;          &lt;td&gt;成功&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;Q: 这里考虑下如何优雅的关闭channel (避免panic)?&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
