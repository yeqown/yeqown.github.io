<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式 on Yeqown</title>
    <link>https://www.yeqown.xyz/categories/%E5%88%86%E5%B8%83%E5%BC%8F/</link>
    <description>Recent content in 分布式 on Yeqown</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 03 Jan 2025 20:49:24 +0800</lastBuildDate>
    <atom:link href="https://www.yeqown.xyz/categories/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>通过一次抓包来掌握memcached</title>
      <link>https://www.yeqown.xyz/2025/01/03/%E9%80%9A%E8%BF%87%E4%B8%80%E6%AC%A1%E6%8A%93%E5%8C%85%E6%9D%A5%E6%8E%8C%E6%8F%A1memcached/</link>
      <pubDate>Fri, 03 Jan 2025 20:49:24 +0800</pubDate>
      <guid>https://www.yeqown.xyz/2025/01/03/%E9%80%9A%E8%BF%87%E4%B8%80%E6%AC%A1%E6%8A%93%E5%8C%85%E6%9D%A5%E6%8E%8C%E6%8F%A1memcached/</guid>
      <description>&lt;h2 id=&#34;什么是-memcachedhttpsmemcachedorg&#34;&gt;&#xA;  什么是 &lt;a href=&#34;https://memcached.org/&#34;&gt;memcached&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-memcachedhttpsmemcachedorg&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;memcached 是一个高性能的“分布式”内存对象缓存系统，用于动态 Web 应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态、数据库驱动网站的速度。memcached 是自由软件，以 BSD 许可证发布。&lt;/p&gt;&#xA;&lt;p&gt;相比于大家熟知的 Redis，memcached 更加简单，只支持 key-value 存储，而 Redis 支持更多的数据结构，如 list、set、hash 等。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Github 地址：&lt;a href=&#34;https://github.com/memcached/memcached&#34;&gt;https://github.com/memcached/memcached&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;为什么有-redis-还要使用-memcached&#34;&gt;&#xA;  为什么有 redis 还要使用 memcached&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e6%9c%89-redis-%e8%bf%98%e8%a6%81%e4%bd%bf%e7%94%a8-memcached&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;从我个人的角度来说，要在采用一个缓存系统的时候，我会优先选择 Redis，因为 Redis 功能更加强大，支持更多的数据结构，而且 Redis 也支持持久化，在高可用和分布式部分的设计上也更加完善。&lt;/p&gt;&#xA;&lt;p&gt;但是 memcached 也有自己的优势，比如更加简单，更加轻量级，更加容易上手，因此在某些系统中也会选用 memcached。因此，了解 memcached 的设计也是有必要的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;memcached-协议概览&#34;&gt;&#xA;  memcached 协议概览&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#memcached-%e5%8d%8f%e8%ae%ae%e6%a6%82%e8%a7%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;memcached 支持基本的文本协议和&lt;a href=&#34;https://docs.memcached.org/protocols/meta/&#34;&gt;元文本协议&lt;/a&gt;，其中元文本协议于 2019 年推出。memcached 还曾支持过二进制协议，但已经被废弃。&lt;/p&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;&lt;p&gt;memcached 的协议是基于文本的，因此我们可以通过 telnet 或者 netcat 工具来模拟 memcached 的客户端，从而方便的进行测试。&lt;/p&gt;&#xA;&lt;p&gt;这两者是 “交叉兼容” 的，也就是说我们可以通过 &lt;em&gt;&lt;strong&gt;文本协议来设置键值&lt;/strong&gt;&lt;/em&gt;, 通过 &lt;em&gt;&lt;strong&gt;元文本协议来查询&lt;/strong&gt;&lt;/em&gt;，反之亦然。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;standard-text-protocol&#34;&gt;&#xA;  Standard Text Protocol&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#standard-text-protocol&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;详细的协议文档可以参考：&lt;a href=&#34;https://github.com/memcached/memcached/blob/master/doc/protocol.txt&#34;&gt;https://github.com/memcached/memcached/blob/master/doc/protocol.txt&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;memcached 的标准文本协议是一个基于文本的协议，它使用 ASCII 字符串来进行通信。memcached 服务器监听在默认端口 11211 上，客户端通过 TCP 连接到服务器，然后发送命令和数据。因此我们可以很容易的通过 telnet 工具就可以完成 memcached 的基本操作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ShardingSphere-Proxy问题几则</title>
      <link>https://www.yeqown.xyz/2024/08/18/shardingsphere-proxy%E9%97%AE%E9%A2%98%E5%87%A0%E5%88%99/</link>
      <pubDate>Sun, 18 Aug 2024 09:43:35 +0800</pubDate>
      <guid>https://www.yeqown.xyz/2024/08/18/shardingsphere-proxy%E9%97%AE%E9%A2%98%E5%87%A0%E5%88%99/</guid>
      <description>&lt;p&gt;ShardingSphere Proxy 是 Apache ShardingSphere 的一个子项目，是一个基于 MySQL 协议的数据库中间件，用于实现分库分表、读写分离等功能。在使用过程中，遇到了一些问题，记录如下。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这里主要针对的是 分库分表 的使用场景。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;问题概述&#34;&gt;&#xA;  问题概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%97%ae%e9%a2%98%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;数据库往往是一个系统最容易出现瓶颈的点，当遇到数据库瓶颈时，我们可以通过数据拆分来缓解问题。数据拆分的方式通常分为横向拆分和纵向拆分，横向拆分即分库分表；纵向拆分即把一个库表中的字段拆分到不同的库表中去。这两种手段并不互斥，而是在实际情况中相辅相成。本文即是横向拆分相关内容。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;常见的部署方式有哪些？&lt;/li&gt;&#xA;&lt;li&gt;数据分片规则怎么配置？&lt;/li&gt;&#xA;&lt;li&gt;数据分片数应该怎么确定？&lt;/li&gt;&#xA;&lt;li&gt;数据分片后唯一索引还有用吗？&lt;/li&gt;&#xA;&lt;li&gt;数据分片后数据迁移？&lt;/li&gt;&#xA;&lt;li&gt;数据分片后如何确定实际执行 SQL 语句？&lt;/li&gt;&#xA;&lt;li&gt;数据分片后的查询优化？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;0-常见的部署方式&#34;&gt;&#xA;  0. 常见的部署方式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#0-%e5%b8%b8%e8%a7%81%e7%9a%84%e9%83%a8%e7%bd%b2%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;官方提供了两种部署方式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单机部署：将 ShardingSphere Proxy 部署在单台服务器上，用于测试和开发环境。&lt;/li&gt;&#xA;&lt;li&gt;集群部署：将 ShardingSphere Proxy 部署在多台服务器上，用于生产环境。集群模式下使用 zookeeper 来存储元数据。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;关于元数据，元数据是 ShardingSphere Proxy 的核心，用于存储分库分表规则、读写分离规则等信息。&#xA;官方建议使用集群模式部署 生产环境的 ShardingSphere Proxy&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;如果不按照官方的指引，选择部署了多个 Standalone 模式的 ShardingSphere Proxy，那么需要注意“&lt;em&gt;&lt;strong&gt;每个这样的 proxy 节点会有自己的元信息，他们之间并不互通&lt;/strong&gt;&lt;/em&gt;”。在这些情况下会出现节点之间元数据不一致的问题，参看如下测试：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 启动 3 个 standalone 模式的 ShardingSphere Proxy&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          +-------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          |  LB   |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          +-------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                              |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                |-------------|--------------|&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                |             |              |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            +-------+     +-------+       +-------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            | Node1 |     | Node2 |       | Node3 |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            +-------+     +-------+       +-------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;初始表结构如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nats设计与实现</title>
      <link>https://www.yeqown.xyz/2024/02/26/nats%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 26 Feb 2024 21:30:08 +0800</pubDate>
      <guid>https://www.yeqown.xyz/2024/02/26/nats%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h3 id=&#34;nats设计与实现&#34;&gt;&#xA;  NATS设计与实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nats%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nats-io/nats-sevrer&#34;&gt;https://github.com/nats-io/nats-sevrer&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;NATS 就是一个消息中间件，提供了 Pub/Sub 核心数据流，并基于此构建了 Request/Reply API 和 JetStream 用来提供可靠的分布式存储能力，和更高的 QoS（至少一次 + ACK）。&lt;/p&gt;&#xA;&lt;img src=&#34;https://www.yeqown.xyz/images/nats/Pasted%20image%2020240219151629.png&#34; style=&#34;width: 50%&#34; /&gt;</description>
    </item>
    <item>
      <title>设计一个分布式定时任务系统</title>
      <link>https://www.yeqown.xyz/2022/01/27/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Thu, 27 Jan 2022 16:52:24 +0800</pubDate>
      <guid>https://www.yeqown.xyz/2022/01/27/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%B3%BB%E7%BB%9F/</guid>
      <description>&lt;h3 id=&#34;需求和背景分析&#34;&gt;&#xA;  需求和背景分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9c%80%e6%b1%82%e5%92%8c%e8%83%8c%e6%99%af%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;一提到定时任务的使用场景，我们肯定能想到很多场景，比如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每天晚上12点执行一次清理数据的任务&lt;/li&gt;&#xA;&lt;li&gt;每天凌晨1点给符合条件的用户发送推广邮件&lt;/li&gt;&#xA;&lt;li&gt;每个月10号结算工资&lt;/li&gt;&#xA;&lt;li&gt;每隔5分钟检查一次服务器的状态&lt;/li&gt;&#xA;&lt;li&gt;每天根据用户的配置，给用户发送站内消息提醒&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;从常见的场景中，我们可以提炼出一些定时任务的特点：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;特点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;定时&lt;/td&gt;&#xA;          &lt;td&gt;执行时间有规则&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;可靠&lt;/td&gt;&#xA;          &lt;td&gt;可以延迟执行，但不能不执行；可以不执行，但是不能多执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;并发（可能）&lt;/td&gt;&#xA;          &lt;td&gt;某些场景下，可以运行多个 cron 进程来提高执行效率&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;可执行&lt;/td&gt;&#xA;          &lt;td&gt;这个有点废话了，但是这个关系到 cronjob 的设计，因此在这里还是提出来&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;但是作为一个系统来说，我们需要更多的功能来提升用户体验，保证平台的可靠和稳定。我们设想下以下的场景：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定时任务已经触发了，但是有没有执行，执行结果是什么？&lt;/li&gt;&#xA;&lt;li&gt;如果一个定时任务长时间运行，那么它正常吗？&lt;/li&gt;&#xA;&lt;li&gt;一个定时任务还在运行，但是下一个触发时机又到来了，该怎么办？&lt;/li&gt;&#xA;&lt;li&gt;如果服务器资源已经处于高位，那么要被触发的任务还触发吗？&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;最后，基本的访问控制，权限分配和API设计，这些都是系统功能的一部分，但不作为本文的重点考虑对象。&lt;/p&gt;&#xA;&lt;h4 id=&#34;一些概念&#34;&gt;&#xA;  一些概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e4%ba%9b%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;到这里我们可以提取一些概念，来帮助我们设计一个系统：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;名词&lt;/th&gt;&#xA;          &lt;th&gt;解释&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;CronJob&lt;/td&gt;&#xA;          &lt;td&gt;定时任务实例，描述定时任务资源的一个实体&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;Job&lt;/td&gt;&#xA;          &lt;td&gt;执行中的定时任务&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;Scheduler&lt;/td&gt;&#xA;          &lt;td&gt;调度器，负责触发 CronJob 执行和监控 Job 的执行状态；或许还会存储一些 CronJob 的状态&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;JobRuntime&lt;/td&gt;&#xA;          &lt;td&gt;job 运行时，准备 Job 运行时需要的资源; 可以参考 k8s CRI&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这里 JobRuntime 是抽象化的概念，因为 Job 可以是k8s上的POD，也可以是物理机的进程，还可以是一个进程中的coroutine。&lt;/p&gt;</description>
    </item>
    <item>
      <title>etcd与service-registration-discovery</title>
      <link>https://www.yeqown.xyz/2018/10/23/etcd-service-registration-discovery/</link>
      <pubDate>Tue, 23 Oct 2018 17:20:48 +0000</pubDate>
      <guid>https://www.yeqown.xyz/2018/10/23/etcd-service-registration-discovery/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;声明：本文对etcd的原理，实现细节，性能等均不考虑，仅将etcd作为一个分布式的K-V存储组件。本文提价代码均在： &lt;a href=&#34;https://github.com/yeqown/server-common/tree/master/framework/etcd&#34;&gt;github.com/yeqown/server-common/tree/master/framework/etcd&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;一个核心&#34;&gt;&#xA;  一个核心&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e4%b8%aa%e6%a0%b8%e5%bf%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;etcd, 分布式Key-Value存储工具。详细资料&lt;a href=&#34;https://github.com/etcd-io/etcd/blob/master/Documentation/docs.md&#34;&gt;由此去&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/etcd-io/etcd/releases&#34;&gt;etcd下载安装&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;两个对象&#34;&gt;&#xA;  两个对象&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%a4%e4%b8%aa%e5%af%b9%e8%b1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;服务提供者（在测试环境中，我定义为单独的服务实例），也就是服务的提供者，需要向其他服务暴露自己的ip和端口，方便调用。&lt;/li&gt;&#xA;&lt;li&gt;服务调用者（同样地，在测试环境中我定义为反向代理网关程序），也就是服务的调用者，需要获取到 &lt;em&gt;&lt;strong&gt;可使用&lt;/strong&gt;&lt;/em&gt; 地服务地址并调用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h3 id=&#34;关于服务注册与发现&#34;&gt;&#xA;  关于服务注册与发现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b3%e4%ba%8e%e6%9c%8d%e5%8a%a1%e6%b3%a8%e5%86%8c%e4%b8%8e%e5%8f%91%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;就具体场景而言：我们的生产环境中使用了一个代理网关服务器，用于转发移动端和PC端的API请求，并完成其他功能。所有的服务实例配置都是硬编码在网关程序中，顶多就是抽离出来成了一个配置文件。这样做的缺点很明显：“非动态”。也就意味着，一旦有服务Down掉，那么用户访问则可能异常，甚至导致整个服务的崩溃；其次，需要对服务进行扩容的情况下，则需要先进行服务部署再更新网关程序，步骤繁琐且容易出错。&lt;/p&gt;&#xA;&lt;p&gt;那么如果我们设计成为如下图的样子：&#xA;&lt;img src=&#34;https://www.yeqown.xyz/images/etcd-service-regisration-discovery.png&#34; alt=&#34;etcd-service-regisration-discovery&#34; /&gt;&#xA;对于新添加的服务实例，只需要启动新的服务，并注册到etcd相应的路径下就行了。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;注册：对于同一组服务，配置一个统一的前缀（如图上的&amp;quot;/specServer&amp;quot;），不同实例使用ID加以区分。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;将现行服务改造成为上述模式需要解决的问题&#34;&gt;&#xA;  将现行服务改造成为上述模式需要解决的问题：&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b0%86%e7%8e%b0%e8%a1%8c%e6%9c%8d%e5%8a%a1%e6%94%b9%e9%80%a0%e6%88%90%e4%b8%ba%e4%b8%8a%e8%bf%b0%e6%a8%a1%e5%bc%8f%e9%9c%80%e8%a6%81%e8%a7%a3%e5%86%b3%e7%9a%84%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;etcd 配置安装&lt;/li&gt;&#xA;&lt;li&gt;网关程序改造（监听etcd的节点夹子/prefix;适配动态的服务实例调用）&lt;/li&gt;&#xA;&lt;li&gt;服务实例改造（注册服务实例到etcd;心跳更新;其他配套设施，异常退出删除注册信息）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;etcd安装配置在github.com已经非常详细了。在这里贴一下我在本地测试时候启动的脚本（这部分是从etcd-demo获取到的，做了针对端口的改动）：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# For each machine&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TOKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;token-01&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CLUSTER_STATE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;new&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME_1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;machine1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME_2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;machine2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME_3&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;machine3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HOST_1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;127.0.0.1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HOST_2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;127.0.0.1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HOST_3&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;127.0.0.1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CLUSTER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME_1&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HOST_1&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2380,&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME_2&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HOST_2&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2381,&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME_3&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HOST_3&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2382&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# For machine 1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;THIS_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME_1&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;THIS_IP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HOST_1&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;etcd --data-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;machine1.etcd --name &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;--initial-advertise-peer-urls http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_IP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2380 --listen-peer-urls http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_IP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2380 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;--advertise-client-urls http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_IP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2377 --listen-client-urls http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_IP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2377 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;--initial-cluster &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CLUSTER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;--initial-cluster-state &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CLUSTER_STATE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --initial-cluster-token &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# For machine 2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;THIS_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME_2&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;THIS_IP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HOST_2&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;etcd --data-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;machine2.etcd --name &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;--initial-advertise-peer-urls http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_IP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2381 --listen-peer-urls http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_IP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2381 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;--advertise-client-urls http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_IP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2378 --listen-client-urls http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_IP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2378 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;--initial-cluster &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CLUSTER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;--initial-cluster-state &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CLUSTER_STATE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --initial-cluster-token &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &amp;amp; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# For machine 3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;THIS_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME_3&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;THIS_IP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HOST_3&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;etcd --data-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;machine3.etcd --name &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;--initial-advertise-peer-urls http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_IP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2382 --listen-peer-urls http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_IP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2382 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;--advertise-client-urls http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_IP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2379 --listen-client-urls http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;THIS_IP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:2379 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;--initial-cluster &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CLUSTER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;--initial-cluster-state &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CLUSTER_STATE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --initial-cluster-token &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于程序的改造，鉴于服务较多且etcd操作流程大体一致，便简单包装了一下，项目地址见文首位置。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分布式架构入门</title>
      <link>https://www.yeqown.xyz/2018/04/17/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 17 Apr 2018 15:01:33 +0000</pubDate>
      <guid>https://www.yeqown.xyz/2018/04/17/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;p&gt;在开始之前必须明确的是，分布式和集群的区别，简单的说：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;1.分布式是一种工作方式，把一个系统的不同功能放在不同的机器上；&#xA;2.集群是一种物理形态，同一个任务放在不同的机器上；&#xA;&#xA;这样说，也并不是说这两个概念是完全不同，还互相独立，而是实际应用中相辅相成。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;我们常说的负载均衡的背后就是集群部署，某些公司为了能扛住突然增长的流量，会采用加很多台服务器的方式来提高性能。看下图：&#xA;&lt;img src=&#34;http://xiyouqi.github.io/EAD-Documents/html/01-Platform-Architecture/images/deployment-distribute.png&#34; alt=&#34;集群部署&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;对于小公司来说，这样部署的方式在于：简单快速，成本在可接受范围。（如果愿意多花点时间进行代码重构和技术再选型或许效果会更好，当然估计要换个不懂技术的老板，然后忽悠他😊）&lt;/p&gt;&#xA;&lt;p&gt;但是也不是没有隐患，一方面，集群部署虽然能提高系统的可用性，但是如果多台机器离线，会导致其他机器压力增大，如果严重超过机器负载能力，会导致越来越多的机器离线，一旦解决不及时便会导致整个应用崩溃。其次，集群部署为了保证数据的一致性，一般多采用相同数据源，因此集群并不能无限制扩张。&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h3 id=&#34;分布式系统的应用场景&#34;&gt;&#xA;  分布式系统的应用场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e7%b3%bb%e7%bb%9f%e7%9a%84%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;分布式主要解决的问题是提升应用的负载能力。&lt;/p&gt;&#xA;&lt;h3 id=&#34;分布式的优缺点&#34;&gt;&#xA;  分布式的优缺点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e7%9a%84%e4%bc%98%e7%bc%ba%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;将一个系统的不同模块分别部署在不同的机器上。这里不得不说到微服务，微服务是把系统服务拆分成为独立的服务来部署（这里说的&lt;code&gt;独立&lt;/code&gt;，是数据独立和部署独立，不依赖于其他服务）。&lt;/p&gt;&#xA;&lt;p&gt;从本质上来说微服务也是分布式部署的一种。只是相比一般分布式应用，拆分更加彻底。&lt;/p&gt;&#xA;&lt;h4 id=&#34;优点&#34;&gt;&#xA;  优点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%98%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;分成多个模块，并使用接口通信，低耦合；&#xA;团队协作开发，事先约定好接口，独立开发，效率更高；&#xA;部署更加灵活；&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;缺点&#34;&gt;&#xA;  缺点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%ba%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;依赖网络通信，增加额外开发通信接口。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;&#xA;  总结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;以上说的都是垃圾，只希望打开思路。某邓同志说：能抗住压力的应用才是好应用。&lt;/p&gt;&#xA;&lt;h3 id=&#34;参考资料&#34;&gt;&#xA;  参考资料&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/boonya/article/details/55046568&#34;&gt;https://blog.csdn.net/boonya/article/details/55046568&lt;/a&gt;&#xA;&lt;a href=&#34;https://www.jianshu.com/p/39c1e4ec0d63&#34;&gt;https://www.jianshu.com/p/39c1e4ec0d63&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
